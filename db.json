{"Asset":[{"_id":"themes\\yilia\\source\\dyq.jpg","path":"dyq.jpg","modified":true},{"_id":"themes\\yilia\\source\\favicon.ico","path":"favicon.ico","modified":true},{"_id":"themes\\yilia\\source\\img\\coderwall.png","path":"img/coderwall.png","modified":true},{"_id":"themes\\yilia\\source\\img\\delicious.png","path":"img/delicious.png","modified":true},{"_id":"themes\\yilia\\source\\img\\facebook.png","path":"img/facebook.png","modified":true},{"_id":"themes\\yilia\\source\\img\\github.png","path":"img/github.png","modified":true},{"_id":"themes\\yilia\\source\\img\\google.png","path":"img/google.png","modified":true},{"_id":"themes\\yilia\\source\\img\\img-err.png","path":"img/img-err.png","modified":true},{"_id":"themes\\yilia\\source\\img\\img-loading.png","path":"img/img-loading.png","modified":true},{"_id":"themes\\yilia\\source\\img\\linkedin.png","path":"img/linkedin.png","modified":true},{"_id":"themes\\yilia\\source\\img\\pinboard.png","path":"img/pinboard.png","modified":true},{"_id":"themes\\yilia\\source\\img\\pinterest.png","path":"img/pinterest.png","modified":true},{"_id":"themes\\yilia\\source\\img\\rss.png","path":"img/rss.png","modified":true},{"_id":"themes\\yilia\\source\\img\\stackoverflow.png","path":"img/stackoverflow.png","modified":true},{"_id":"themes\\yilia\\source\\img\\twitter.png","path":"img/twitter.png","modified":true},{"_id":"themes\\yilia\\source\\img\\weibo.png","path":"img/weibo.png","modified":true},{"_id":"themes\\yilia\\source\\js\\instagram.js","path":"js/instagram.js","modified":true},{"_id":"themes\\yilia\\source\\js\\jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":true},{"_id":"themes\\yilia\\source\\js\\main.js","path":"js/main.js","modified":true},{"_id":"themes\\yilia\\source\\js\\script.js","path":"js/script.js","modified":true},{"_id":"themes\\yilia\\source\\css\\style.styl","path":"css/style.styl","modified":true},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":true},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":true},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":true},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":true},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":true},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":true}],"Cache":[{"_id":"scaffolds\\draft.md","mtime":1422069131000},{"_id":"scaffolds\\page.md","mtime":1422069131000},{"_id":"scaffolds\\photo.md","mtime":1422069131000},{"_id":"scaffolds\\post.md","mtime":1422069131000},{"_id":"source\\_posts\\UEFI双系统.md","mtime":1422069131000},{"_id":"source\\_posts\\UEFI双系统.md~","mtime":1422069131000},{"_id":"source\\_posts\\动态规划：LIS问题.md","mtime":1422075503000},{"_id":"source\\_posts\\新的开始，我的个人博客.md","mtime":1422069131000},{"_id":"themes\\yilia\\README.md","mtime":1422069131000},{"_id":"themes\\yilia\\dyq.jpg","mtime":1422069131000},{"_id":"themes\\yilia\\_config.yml","mtime":1422069131000},{"_id":"themes\\yilia\\favicon.ico","mtime":1422069131000},{"_id":"themes\\yilia\\package.json","mtime":1422069131000},{"_id":"themes\\yilia\\scripts\\fancybox.js","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\archive.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\category.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\index.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\layout.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\page.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\post.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\tag.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\archive-post.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\after-footer.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\archive.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\article.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\footer.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\footer.ejs~","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\head.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\header.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\left-col.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\mobile-nav.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\post\\date.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\post\\category.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\post\\nav.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\post\\duoshuo.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\post\\share.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\post\\tag.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\layout\\_partial\\post\\title.ejs","mtime":1422069131000},{"_id":"themes\\yilia\\source\\dyq.jpg","mtime":1422069131000},{"_id":"themes\\yilia\\source\\favicon.ico","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\coderwall.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\delicious.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\facebook.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\github.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\google.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\img-err.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\img-loading.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\linkedin.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\pinboard.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\pinterest.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\rss.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\stackoverflow.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\twitter.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\img\\weibo.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\js\\instagram.js","mtime":1422069131000},{"_id":"themes\\yilia\\source\\js\\jquery.lazyload.js","mtime":1422069131000},{"_id":"themes\\yilia\\source\\js\\main.js","mtime":1422069131000},{"_id":"themes\\yilia\\source\\js\\script.js","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_extend.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_variables.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\style.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\archive.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\article.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\footer.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\header.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\highlight.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\instagram.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\main.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\mobile.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\page.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\share.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_partial\\tagcloud.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_util\\grid.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\_util\\mixin.styl","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.eot","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svg","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svgz","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.ttf","mtime":1422069131000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.woff","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\blank.gif","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading.gif","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_overlay.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.css","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.js","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\fancybox_buttons.png","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-media.js","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","mtime":1422069131000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","mtime":1422069131000}],"Category":[],"Page":[],"Post":[{"title":"UEFI双系统","date":1415035392000,"comments":true,"tags":["gvht5y6hjvaljbhp"],"content":"<p>传统的BIOS担任着操作系统控制硬件的中介，目前，已经发展出最新的UEFI(Unified Extensible Firmware Interface)固件接口，这种接口大部分是C语言编写的；运行于64位模式，突破了传统16位代码的寻址能力，从而运行速度快；向下兼容性好，是由EFI字节代码编写而成；内置图形界面，且扩展性很强大。UEFI在引导时提供了SecureBoot,虽然大大加快了开机速度，但是也禁止了加载未知的系统，从而不能在SecureBoot开启的情况下安装双系统。<br><a id=\"more\"></a></p>\n<h3 id=\"访问UEFI设置\">访问UEFI设置</h3>\n<p>在WIN8中，windows+i进入windows设置-&gt;更改电脑设置-&gt;通用设置/更新与恢复-&gt;高级启动-&gt;立即重新启动-&gt;疑难解答-&gt;高级选项-&gt;UEFI设置-&gt;重启电脑，即以UEFI启动系统</p>\n<h3 id=\"禁用安全启动\">禁用安全启动</h3>\n<p>移动选项卡到Secure/Boot下，在Secure Boot选Disabled,退出并保存设置。<br>选择启动顺序  U盘HDD优先</p>\n<h3 id=\"重启，安装ubuntu\">重启，安装ubuntu</h3>\n<p>做好U盘启动盘，接入重启，安装ubuntu。</p>\n","source":"_posts/UEFI双系统.md","raw":"title: UEFI双系统\ndate: 2014-11-04 01:23:12\ncomments: True\ntags:\n\tsystem\n---\n传统的BIOS担任着操作系统控制硬件的中介，目前，已经发展出最新的UEFI(Unified Extensible Firmware Interface)固件接口，这种接口大部分是C语言编写的；运行于64位模式，突破了传统16位代码的寻址能力，从而运行速度快；向下兼容性好，是由EFI字节代码编写而成；内置图形界面，且扩展性很强大。UEFI在引导时提供了SecureBoot,虽然大大加快了开机速度，但是也禁止了加载未知的系统，从而不能在SecureBoot开启的情况下安装双系统。\n<!--more-->\n###访问UEFI设置\n在WIN8中，windows+i进入windows设置->更改电脑设置->通用设置/更新与恢复->高级启动->立即重新启动->疑难解答->高级选项->UEFI设置->重启电脑，即以UEFI启动系统\n###禁用安全启动\n移动选项卡到Secure/Boot下，在Secure Boot选Disabled,退出并保存设置。\n选择启动顺序  U盘HDD优先\n###重启，安装ubuntu\n做好U盘启动盘，接入重启，安装ubuntu。\n\n","slug":"UEFI双系统","updated":1422069131000,"excerpt":"<p>传统的BIOS担任着操作系统控制硬件的中介，目前，已经发展出最新的UEFI(Unified Extensible Firmware Interface)固件接口，这种接口大部分是C语言编写的；运行于64位模式，突破了传统16位代码的寻址能力，从而运行速度快；向下兼容性好，是由EFI字节代码编写而成；内置图形界面，且扩展性很强大。UEFI在引导时提供了SecureBoot,虽然大大加快了开机速度，但是也禁止了加载未知的系统，从而不能在SecureBoot开启的情况下安装双系统。<br>","_id":"1azh0be8mg2ip3qh","categories":[],"layout":"post","photos":[],"link":""},{"title":"动态规划：LIS问题","date":1421995879000,"tags":["dipsoars39backj7"],"content":"<p><b>动态规划问题(DP)</b><br>类似于数学中的动力系统，物理中的微分方程，每一步的求解是由上一步的解决定的，所以类似的，解决动态问题需要知道初始状态以及递推公式，在动态问题中我们把递推公式称为<b>状态转移</b>方程。<br>最长递增子序列长度问题(LIS:longest increasing subsequence)是DP的一个典型例子，通过这个例子可以理解DP问题的求解思想。<br><br><b>LIS问题描述：</b><br>一个数列A[0]、A[1]…A[N-1]，求出其中非递减序列的最大长度。<br>举例：该序列为 {4, 2, 3, 8, 5, 7},则其非递减子序列的最大长度为 3，最长非递减子序列为{2, 3, 8}。<br><a id=\"more\"></a><br><b>问题分析:</b><br>用l[i]表示以A[i]结尾的最长子序列的长度，则初始状态为:</p>\n<figure class=\"highlight C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">l[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n\n<p>状态转移方程为:</p>\n<figure class=\"highlight C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">l[i]=max(<span class=\"number\">1</span>, l[j] <span class=\"keyword\">for</span> j&lt;i && A[j]&lt;=A[i]);</div></pre></td></tr></table></figure>\n\n<p>最终LIS问题的解为l[N]中的最大值。<br>显然该算法的时间复杂度为O(N<sup>2</sup>)。<br><b>code：</b></p>\n<figure class=\"highlight C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* The longest increasing subsequence of {4, 2, 3, 8, 5, 7}. */</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"stdio.h\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> MaxSubSeq(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> N);</div><div class=\"line\"></div><div class=\"line\">main(){</div><div class=\"line\">\t<span class=\"keyword\">int</span> A[]={<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>};</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The LIS length is:%3d.\\n\"</span>,MaxSubSeq(A, <span class=\"number\">5</span>));</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> MaxSubSeq(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> N){</div><div class=\"line\">\t<span class=\"keyword\">int</span> i, j, maxlen=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> l[N];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;N;i++){</div><div class=\"line\">\t\tl[i]=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>;j&lt;i;j++){</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (A[j]&lt;=A[i] && l[i]&lt;l[j]+<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t\tl[i]=l[j]+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\tmaxlen=(l[i]&gt;maxlen)?l[i]:maxlen;</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">return</span> maxlen;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<p>基于该算法，可以巧妙的运用二分法将时间复杂度优化为O(NlogN)，具体算法网上已有：<a href=\"http://www.felix021.com/blog/read.php?1587\" target=\"_blank\" rel=\"external\">O(NlogN)算法</a>。<br><br>当然LIS问题只是DP类问题的初级例子，还有很多更高维度更复杂的问题也是运用DP的解法思想来解决的。<br><br>接下来看另外一个例子：最大连续乘积子串问题。首先需要弄清楚的是，<b>子串(SubString)</b>与上一个例子中的<b>子序列(SubSequence)</b>是不同的，子串必须连续，而子序列并不需要连续。<br><b>问题描述：</b><br>给定一个浮点序列，求出最大子串乘积，例如：A[]={-2.5，4，0，3，0.5，8，-1}，其最大子串乘积为12。<br><b>问题分析：</b><br>暴力解法遍历所有的子串，时间复杂度为O(N<sup>2</sup>)。动态规划的解法时间复杂度可降为O(N)。<br>由于序列中含有负数，所以对于第i的状态，要同时考虑以i-1结尾的子串乘积的最大值和最小值。<br>由于我们这里考虑的是子串而不是子序列，所以不需要用专门的表格来记录以A[i]结尾的最大和最小值，从而减少不必要的空间调用。<br>初始状态：</p>\n<figure class=\"highlight C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxend=minend=A[<span class=\"number\">0</span>];</div></pre></td></tr></table></figure>\n\n<p>状态转移方程为：</p>\n<figure class=\"highlight C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">maxend of A[i]=max(maxend of A[i-<span class=\"number\">1</span>]*A[i],minend of A[i-<span class=\"number\">1</span>]*A[i],A[i]);</div><div class=\"line\">minend of A[i]=min(maxend of A[i-<span class=\"number\">1</span>]*A[i],minend of A[i-<span class=\"number\">1</span>]*A[i],A[i]);</div></pre></td></tr></table></figure>\n\n<p>最终给出maxend的最大值，即为问题的解。<br><b>code：</b></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Solution of max substring production. A[]={-2.5，4，0，3，0.5，8，-1}*/</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> \"stdio.h\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">double</span> MaxSubString(<span class=\"keyword\">double</span> A[], <span class=\"keyword\">int</span> N);</div><div class=\"line\"><span class=\"keyword\">double</span> Max(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b);</div><div class=\"line\"><span class=\"keyword\">double</span> Min(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b);</div><div class=\"line\"></div><div class=\"line\">main(){</div><div class=\"line\">\t<span class=\"keyword\">double</span> A[]={-<span class=\"number\">2.5</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0.5</span>, <span class=\"number\">8</span>, -<span class=\"number\">1</span>};</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The max production of SubString is %4f.\\n \"</span>, MaxSubString(A, <span class=\"number\">7</span>));</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">double</span> MaxSubString(<span class=\"keyword\">double</span> A[], <span class=\"keyword\">int</span> N){</div><div class=\"line\">\t<span class=\"keyword\">double</span> maxend=A[<span class=\"number\">0</span>];</div><div class=\"line\">\t<span class=\"keyword\">double</span> minend=A[<span class=\"number\">0</span>];</div><div class=\"line\">\t<span class=\"keyword\">double</span> maxpro=maxend;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">1</span>;i&lt;N;i++){</div><div class=\"line\">\t\tmaxend=Max(Max(maxend*A[i],minend*A[i]),A[i]);</div><div class=\"line\">\t\tminend=Min(Min(maxend*A[i],minend*A[i]),A[i]);</div><div class=\"line\">\t\tmaxpro=Max(maxpro, maxend);</div><div class=\"line\">\t}</div><div class=\"line\">\t<span class=\"keyword\">return</span> maxpro;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">double</span> Max(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b){</div><div class=\"line\">\t<span class=\"keyword\">return</span> (a&gt;b)?a:b;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">double</span> Min(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b){</div><div class=\"line\">\t<span class=\"keyword\">return</span> (a&gt;b)?b:a;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>显然只调用一次循环，时间复杂度为O(N)。</p>\n<blockquote>\n\n<p>一句话理解动态规划，则是枚举所有状态，然后剪枝，寻找最优状态，同时将每一次求解子问题的结果保存在一张“表格”中，以后再遇到重叠的子问题，从表格中保存的状态中查找（俗称记忆化搜索）。</p>\n<footer><strong>July</strong><cite><a href=\"http://taop.marchtea.com/\" target=\"_blank\" rel=\"external\">--The Art of Programming</a></cite></footer></blockquote>\n\n\n\n\n","source":"_posts/动态规划：LIS问题.md","raw":"title: 动态规划：LIS问题\ndate: 2015-01-23 14:51:19\ntags:\n\t算法\n---\n<b>动态规划问题(DP)</b><br>类似于数学中的动力系统，物理中的微分方程，每一步的求解是由上一步的解决定的，所以类似的，解决动态问题需要知道初始状态以及递推公式，在动态问题中我们把递推公式称为<b>状态转移</b>方程。\n最长递增子序列长度问题(LIS:longest increasing subsequence)是DP的一个典型例子，通过这个例子可以理解DP问题的求解思想。<br>\n<b>LIS问题描述：</b><br>一个数列A[0]、A[1]...A[N-1]，求出其中非递减序列的最大长度。\n举例：该序列为 {4, 2, 3, 8, 5, 7},则其非递减子序列的最大长度为 3，最长非递减子序列为{2, 3, 8}。\n<!--more-->\n<b>问题分析:</b><br>用l[i]表示以A[i]结尾的最长子序列的长度，则初始状态为:\n``` C\n\tl[0]=1;\n```\n状态转移方程为:\n``` C\n\tl[i]=max(1, l[j] for j<i && A[j]<=A[i]);\n```\n最终LIS问题的解为l[N]中的最大值。\n显然该算法的时间复杂度为O(N<sup>2</sup>)。\n<b>code：</b>\n``` C \n/* The longest increasing subsequence of {4, 2, 3, 8, 5, 7}. */\n#include \"stdio.h\"\n\nint MaxSubSeq(int A[], int N);\n\nmain(){\n\tint A[]={4, 2, 3, 8, 5, 7};\n\tprintf(\"The LIS length is:%3d.\\n\",MaxSubSeq(A, 5));\n\treturn 0;\n}\n\nint MaxSubSeq(int A[], int N){\n\tint i, j, maxlen=0;\n\tint l[N];\n\tfor (i=0;i<N;i++){\n\t\tl[i]=1;\n\t\tfor (j=0;j<i;j++){\n\t\t\tif (A[j]<=A[i] && l[i]<l[j]+1)\n\t\t\t\tl[i]=l[j]+1;\n\t\t}\n\t\tmaxlen=(l[i]>maxlen)?l[i]:maxlen;\n\t}\n\treturn maxlen;\n}\n```  \n基于该算法，可以巧妙的运用二分法将时间复杂度优化为O(NlogN)，具体算法网上已有：<a href='http://www.felix021.com/blog/read.php?1587'>O(NlogN)算法</a>。<br>\n当然LIS问题只是DP类问题的初级例子，还有很多更高维度更复杂的问题也是运用DP的解法思想来解决的。<br>\n接下来看另外一个例子：最大连续乘积子串问题。首先需要弄清楚的是，<b>子串(SubString)</b>与上一个例子中的<b>子序列(SubSequence)</b>是不同的，子串必须连续，而子序列并不需要连续。\n<b>问题描述：</b><br>给定一个浮点序列，求出最大子串乘积，例如：A[]={-2.5，4，0，3，0.5，8，-1}，其最大子串乘积为12。\n<b>问题分析：</b><br>暴力解法遍历所有的子串，时间复杂度为O(N<sup>2</sup>)。动态规划的解法时间复杂度可降为O(N)。\n由于序列中含有负数，所以对于第i的状态，要同时考虑以i-1结尾的子串乘积的最大值和最小值。\n由于我们这里考虑的是子串而不是子序列，所以不需要用专门的表格来记录以A[i]结尾的最大和最小值，从而减少不必要的空间调用。\n初始状态：\n``` C\n\tmaxend=minend=A[0];\n```\n状态转移方程为：\n``` C\n\tmaxend of A[i]=max(maxend of A[i-1]*A[i],minend of A[i-1]*A[i],A[i]);\n\tminend of A[i]=min(maxend of A[i-1]*A[i],minend of A[i-1]*A[i],A[i]);\n```\n最终给出maxend的最大值，即为问题的解。\n<b>code：</b>\n```\n/* Solution of max substring production. A[]={-2.5，4，0，3，0.5，8，-1}*/\n#include \"stdio.h\"\n\ndouble MaxSubString(double A[], int N);\ndouble Max(double a, double b);\ndouble Min(double a, double b);\n\nmain(){\n\tdouble A[]={-2.5, 4, 0, 3, 0.5, 8, -1};\n\tprintf(\"The max production of SubString is %4f.\\n \", MaxSubString(A, 7));\n\treturn 0;\n}\n\ndouble MaxSubString(double A[], int N){\n\tdouble maxend=A[0];\n\tdouble minend=A[0];\n\tdouble maxpro=maxend;\n\tint i;\n\tfor (i=1;i<N;i++){\n\t\tmaxend=Max(Max(maxend*A[i],minend*A[i]),A[i]);\n\t\tminend=Min(Min(maxend*A[i],minend*A[i]),A[i]);\n\t\tmaxpro=Max(maxpro, maxend);\n\t}\n\treturn maxpro;\n}\n\ndouble Max(double a, double b){\n\treturn (a>b)?a:b;\n}\n\ndouble Min(double a, double b){\n\treturn (a>b)?b:a;\n}\n```\n显然只调用一次循环，时间复杂度为O(N)。\n{% blockquote July http://taop.marchtea.com/ --The Art of Programming %}\n一句话理解动态规划，则是枚举所有状态，然后剪枝，寻找最优状态，同时将每一次求解子问题的结果保存在一张“表格”中，以后再遇到重叠的子问题，从表格中保存的状态中查找（俗称记忆化搜索）。\n{% endblockquote %}\n\n\n\n","slug":"动态规划：LIS问题","updated":1422075503000,"excerpt":"<p><b>动态规划问题(DP)</b><br>类似于数学中的动力系统，物理中的微分方程，每一步的求解是由上一步的解决定的，所以类似的，解决动态问题需要知道初始状态以及递推公式，在动态问题中我们把递推公式称为<b>状态转移</b>方程。<br>最长递增子序列长度问题(LIS:longest increasing subsequence)是DP的一个典型例子，通过这个例子可以理解DP问题的求解思想。<br><br><b>LIS问题描述：</b><br>一个数列A[0]、A[1]…A[N-1]，求出其中非递减序列的最大长度。<br>举例：该序列为 {4, 2, 3, 8, 5, 7},则其非递减子序列的最大长度为 3，最长非递减子序列为{2, 3, 8}。<br>","_id":"l85of6tcwr3mh656","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"新的开始，我的个人博客","date":1414481072000,"comments":true,"tags":["1xud3mbjsx5qp4ny","5hqdnvtko0lvmi00"],"content":"<p>很久之前就想搭建一个个人的博客，今天经过一上午的折腾，终于实现了用<a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>框架搭建我的博客，并部署到了github page上，感谢Litten提供的<a href=\"https://github.com/litten/hexo-theme-yilia/\" target=\"_blank\" rel=\"external\">yilia</a>模板，非常符合我喜欢的简约风格。</p>\n<p><img src=\"http://b.zol-img.com.cn/desk/bizhi/image/5/1600x900/1413443416301.jpg\"></p>\n<h2 id=\"建立博客小结\">建立博客小结</h2>\n<p>作为我一上午建立博客的回顾，也是我的第一篇博文，以下简单总结一下建立博客的流程。<br><a id=\"more\"></a></p>\n<h3 id=\"准备工作\">准备工作</h3>\n<p>由于<a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>是基于node.js平台开发的博客框架，而且我打算将博客部署到github的静态页面上，所以在搭建博客之前，需要安装：<br>    1、<a href=\"http://www.nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a><br>    2、<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Gitbash</a></p>\n<h3 id=\"安装Hexo框架\">安装Hexo框架</h3>\n<p>Hexo的作者是台湾的黑客<a href=\"https://github.com/tommy351/\" target=\"_blank\" rel=\"external\">Tommy Chen</a>，Hexo是一个简单、强大的博客发布框架<br>安装Hexo<br>打开gitbash</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>npm install -g hexo</div></pre></td></tr></table></figure>\n\n<h3 id=\"部署Hexo\">部署Hexo</h3>\n<p>新建一个作为博客的文件夹，比如/myblog，打开bash在博客文件夹的路径下执行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>hexo init</div><div class=\"line\"><span class=\"variable\">$ </span>npm install</div></pre></td></tr></table></figure>\n\n<p>之后所有的框架文件将建立在博客的文件夹下。</p>\n<h3 id=\"clone主题模板\">clone主题模板</h3>\n<p>在<a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>的网站上有各种开发者提供的模板，可以选择一个喜欢的作为博客的模板。<br>将主题模板clone到本地:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/theme_address themes/theme_name</div></pre></td></tr></table></figure>\n\n<h3 id=\"_config-yml设置\">_config.yml设置</h3>\n<p>设置博客文件夹下的_config.yml:<br>将theme改为下载的theme_name<br>设置上传到github页面：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repo: https://github.com/your<span class=\"emphasis\">_name/your_</span>name.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n\n<h3 id=\"生成静态页面，上传\">生成静态页面，上传</h3>\n<p>以下hexo command分别生成静态页面，运行本地服务器预览，上传到github pages。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>hexo g</div><div class=\"line\"><span class=\"variable\">$ </span>hexo s</div><div class=\"line\"><span class=\"variable\">$ </span>hexo d</div></pre></td></tr></table></figure>\n\n<p>经过这一番折腾，我的博客终于建立完成了，接下来就是用hexo command发布新的文章，并用Markdown语言进行写作。</p>\n<h3 id=\"———_写作能够让人独立思考。\">——— 写作能够让人独立思考。</h3>\n","source":"_posts/新的开始，我的个人博客.md","raw":"---\ntitle: 新的开始，我的个人博客\ndate: 2014-10-28 15:24:32\ncomments: true\ntags: \n\t- 随笔\n\t- web\n---\n[hexo]: http://hexo.io/\n[theme]: https://github.com/litten/hexo-theme-yilia/\n[git]: https://github.com/\n[node]: http://www.nodejs.org/\n[author]: https://github.com/tommy351/\n\n很久之前就想搭建一个个人的博客，今天经过一上午的折腾，终于实现了用[Hexo][hexo]框架搭建我的博客，并部署到了github page上，感谢Litten提供的[yilia][theme]模板，非常符合我喜欢的简约风格。\n\n<img src=\"http://b.zol-img.com.cn/desk/bizhi/image/5/1600x900/1413443416301.jpg\">\n\n##建立博客小结\n作为我一上午建立博客的回顾，也是我的第一篇博文，以下简单总结一下建立博客的流程。\n<!--more-->\n###准备工作\n由于[Hexo][hexo]是基于node.js平台开发的博客框架，而且我打算将博客部署到github的静态页面上，所以在搭建博客之前，需要安装：\n\t1、[Node.js][node]\n\t2、[Gitbash][git]\n###安装Hexo框架\nHexo的作者是台湾的黑客[Tommy Chen][author]，Hexo是一个简单、强大的博客发布框架\n安装Hexo\n打开gitbash\n```\n\t$ npm install -g hexo\n```\n###部署Hexo\n新建一个作为博客的文件夹，比如/myblog，打开bash在博客文件夹的路径下执行：\n```\n\t$ hexo init\n\t$ npm install\n```\n之后所有的框架文件将建立在博客的文件夹下。\n###clone主题模板\n在[Hexo][hexo]的网站上有各种开发者提供的模板，可以选择一个喜欢的作为博客的模板。\n将主题模板clone到本地:\n``` bash\n\t$ git clone https://github.com/theme_address themes/theme_name\n```\n###_config.yml设置\n设置博客文件夹下的_config.yml:\n将theme改为下载的theme_name\n设置上传到github页面：\n``` markdown\ndeploy:\n  type: github\n  repo: https://github.com/your_name/your_name.github.io.git\n  branch: master\n```\n###生成静态页面，上传\n以下hexo command分别生成静态页面，运行本地服务器预览，上传到github pages。\n```\n\t$ hexo g\n\t$ hexo s\n\t$ hexo d\n```\n经过这一番折腾，我的博客终于建立完成了，接下来就是用hexo command发布新的文章，并用Markdown语言进行写作。\n\n### ——— 写作能够让人独立思考。","slug":"新的开始，我的个人博客","updated":1422069131000,"excerpt":"<p>很久之前就想搭建一个个人的博客，今天经过一上午的折腾，终于实现了用<a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>框架搭建我的博客，并部署到了github page上，感谢Litten提供的<a href=\"https://github.com/litten/hexo-theme-yilia/\" target=\"_blank\" rel=\"external\">yilia</a>模板，非常符合我喜欢的简约风格。</p>\n<p><img src=\"http://b.zol-img.com.cn/desk/bizhi/image/5/1600x900/1413443416301.jpg\"></p>\n<h2 id=\"建立博客小结\">建立博客小结</h2>\n<p>作为我一上午建立博客的回顾，也是我的第一篇博文，以下简单总结一下建立博客的流程。<br>","_id":"t5lepxm0pf3uasxn","categories":[],"layout":"post","photos":[],"link":""}],"Tag":[{"name":"system","_id":"gvht5y6hjvaljbhp","posts":["1azh0be8mg2ip3qh"]},{"name":"算法","_id":"dipsoars39backj7","posts":["l85of6tcwr3mh656"]},{"name":"随笔","_id":"1xud3mbjsx5qp4ny","posts":["t5lepxm0pf3uasxn"]},{"name":"web","_id":"5hqdnvtko0lvmi00","posts":["t5lepxm0pf3uasxn"]}]}